#!/usr/bin/env python

import ConfigParser
import os
import base64
import subprocess
from datetime import datetime
import argparse

config = ConfigParser.ConfigParser()
config.read(os.path.expanduser('~/.tlbrc'))

config_section = 'TIMELAPSEBOT'
config_savedir = 'SAVE_DIR'
config_input = 'INPUT'
config_playsound = 'PLAY_SOUND'

if (config.has_option(config_section, config_savedir)):
	SAVE_DIR = config.get(config_section, config_savedir)
else:
	SAVE_DIR = '/tmp'

if (config.has_option(config_section, config_input)):
	INPUT = config.get(config_section, config_input)
else:
	INPUT = '/dev/video0'

if (config.has_option(config_section, config_playsound)):
	PLAY_SOUND = config.getboolean(config_section, config_playsound)
else:
	PLAY_SOUND = False

SOUND = base64.b64decode('''\
UklGRsQnAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YaAnAAAAAOki
6SLNMc0x1jrWOilAKUBrQmtCzEHMQUM+Qz57N3s3cSxxLIUYhRj13/Xfbc9tzz3F
PcXNvs2+2LvYu9i72LvXvNe8y8HLwRDKEMoE1wTX5PHk8RolGiUmMyYzyzvLO9xA
3EDoQuhCHEIcQmg+aD53N3c3Piw+LO0X7ReI34jfOs86zzHFMcXmvua+2LvYu9i7
2LtuvW69msKawi7LLsu32LfYE/wT/OIm4iZENEQ0kzyTPGhBaEFCQ0JDSEJIQmk+
aT5KN0o31yvXK+QW5BbY3tje387fzgbFBsXlvuW+2LvYu9i72Lvuve69UsNSwzLM
MsxR2lHamwybDGQoZCg4NTg1PD08PddB10GBQ4FDWkJaQk4+Tj7+Nv42SCtIK3gV
eBX+3f7daM5ozsbExsTRvtG+4rviu9i72Ltevl6++cP5wyXNJc3b29vbOBE4EbQp
tCkPNg82zD3MPTJCMkKsQ6xDWUJZQh8+Hz6bNps2myqbKqkTqRMK3Qrd4M3gzXjE
eMSyvrK+7bvtu/S79LvEvsS+lcSVxAzODM5g3WDdeBR4FOEq4SrPNs82Sz5LPn1C
fULJQ8lDSUJJQuE94T0mNiY21CnUKWoRahEI3AjcTc1NzSDEIMSKvoq+8rvyuyS8
JLwjvyO/KsUqxe3O7c7l3uXeEBcQF/Qr9Ct/N383vT69Pr1CvULbQ9tDLkIuQpc9
lz2kNaQ1+Sj5KJAOkA7/2v/as8yzzMPDw8Nevl6+8rvyu1C8ULx+v36/vMW8xcvP
y89y4HLgRBlEGfIs8iwiOCI4JT8lP/NC80LkQ+RDCkIKQkM9Qz0VNRU1DCgMKJoK
mgr22fbZF8wXzGTDZMMvvi++8Lvwu3q8erzXv9e/TMZMxqjQqNAN4g3iMxszG+Et
4S28OLw4hD+EPyJDIkPmQ+ZD30HfQec85zx+NH40DycPJ5X9lf3v2O/Yect5ywPD
A8P/vf+97bvtu6O8o7wvwC/A28bbxofRh9G747vj8hzyHMQuxC5NOU053T/dP0tD
S0PiQ+JDrkGuQYU8hTzeM94zAiYCJvH08fTs1+zX3MrcyqLCosLPvc+96rvqu828
zbyIwIjAbMdsx2rSatKD5YPljB6MHpwvnC/XOdc5MEAwQG9Db0PZQ9lDeEF4QR08
HTw2MzYz5yTnJO3w7fDv1u/WQcpBykPCQ8KgvaC96Lvou/e897ziwOLA/8f/x1DT
UNNv52/nCCAIIGswazBbOls6fkB+QI5DjkPMQ8xDPkE+QbA7sDuIMogyvCO8I+Ht
4e331ffVqMmoyeXB5cFzvXO957vnuyO9I70+wT7BlMiUyDzUPNSK6YrpbSFtITIx
MjHbOts6yEDIQKpDqkO7Q7tD/0D/QD47PjvTMdMxgSKBIlfrV+sG1QbVEskSyYrB
isFIvUi96Lvou1G9Ub2cwZzBLMksyS/VL9Xn6+frviK+IvMx8zFVO1U7DkEOQcJD
wkOnQ6dDvUC9QMg6yDoXMRcxNiE2IR7pHukc1BzUgMiAyDDBMMEevR697Lvsu4K9
gr39wf3ByMnIySnWKdal7qXu/iP+I60yrTLLO8s7UUFRQddD10OPQ49Dd0B3QE06
TTpWMFYw1x/XHyDnIOc50znT8Mfwx9rA2sD3vPe88bvxu7S9tL1gwmDCZ8pnyivX
K9cH8gfyLyUvJWEzYTM9PD08kEGQQehD6EN0Q3RDLUAtQM85zzmOL44vYx5jHk3l
TeVb0lvSZcdlx4bAhsDTvNO8+rv6u+m96b3GwsbCC8sLyzXYNdjj9uP2UiZSJhA0
EDSsPKw8zEHMQfZD9kNWQ1ZD4D/gP0w5TDm/Lr8u1xzXHJ7jnuOF0YXR3cbdxjXA
NcCxvLG8BLwEvCG+Ib4wwzDDs8uzy0rZStn7BvsGaidqJ7o0ujQWPRY9BEIEQgFE
AUQ1QzVDkD+QP8U4xTjqLeotLRstGwziDOK00LTQWMZYxue/57+SvJK8EbwRvFy+
XL6cw5zDX8xfzGraatrMDMwMdyh3KF41XjV9PX09OkI6QgpECkQQQxBDPT89Pzo4
OjgOLQ4tYRlhGZLgkuDpz+nP2MXYxZy/nL91vHW8IbwhvJm+mb4MxAzEEc0RzZXb
ldtxEHEQeyl7Kf41/jXhPeE9bUJtQg9ED0TpQulC5j7mPqs3qzcrLCssaBdoFy3f
Ld8kzyTPWsVaxVS/VL9bvFu8NLw0vNm+2b6AxIDEx83Hzc7cztxNE00TdSp1Kpo2
mjZBPkE+nEKcQhJEEkS/Qr9CjD6MPhg3GDdAK0ArNhU2Fdrd2t1kzmTO4cThxA6/
Dr9EvES8SbxJvBy/HL/2xPbEgs6CzhbeFt65FbkVZytnKzE3MTeePp4+yULJQhJE
EkSSQpJCLz4vPoE2gTZNKk0qsxKzEpbcltyqzarNa8RrxMy+zL4wvDC8YbxhvGK/
Yr9xxXHFQ89Dz27fbt/aF9oXUSxRLMQ3xDf4Pvg+80LzQg9ED0RjQmNCzz3PPeU1
5TVSKVIpsw+zD2LbYtv1zPXM+MP4w42+jb4evB68fLx8vKu/q7/vxe/FCtAK0Nng
2eDGGcYZMy0zLVM4UzhOP04/GUMZQwlECUQwQjBCaz1rPUU1RTVNKE0oxAvECzra
OtpFzEXMicOJw1C+UL4PvA+8mbyZvPe/979wxnDG1tDW0FviW+KJG4kbDi4OLt44
3jiiP6I/PUM9QwFEAUT6QfpBBD0EPaA0oDQ/Jz8nagRqBB7ZHtmZy5nLHsMewxe+
F74DvAO8ury6vEfAR8D2xvbGqdGp0ffj9+MrHSsd4y7jLmU5ZTnyP/I/X0NfQ/VD
9UPCQcJBmjyaPPcz9zMmJiYmkfWR9QzYDNjzyvPKtcK1wuC94L36u/q73bzdvJnA
mcB/x3/HgtKC0rLlsuWyHrIesi+yL+g56Dk/QD9AfUN9Q+dD50OGQYZBLDwsPEgz
SDMBJQElOvE68QXXBddRylHKUMJQwqy9rL3zu/O7A70Dve7A7sANyA3IYtNi05Pn
k+ciICIgejB6MGg6aDqJQIlAmEOYQ9ZD1kNIQUhBuzu7O5UylTLQI9AjDe4N7gfW
B9azybPJ78HvwXy9fL3vu++7LL0svUfBR8GeyJ7ISdRJ1Kfpp+l/IX8hPTE9MeM6
4zrQQNBAsUOxQ8JDwkMGQQZBRjtGO9wx3DGQIpAicetx6xHVEdUayRrJkMGQwU69
Tr3uu+67V71XvaLBosEzyTPJOdU51f7r/uvKIsoi+jH6MVs7WzsUQRRBx0PHQ6xD
rEPCQMJAzTrNOh4xHjFBIUEhL+kv6STUJNSFyIXINcE1wSO9I73wu/C7hr2GvQHC
AcLNyc3JMNYw1rnuue4GJAYksjKyMtA70DtVQVVB2kPaQ5NDk0N6QHpAUTpROlsw
WzDfH98fKucq5z7TPtP0x/TH3cDdwPq8+rz0u/S7t723vWPCY8JrymvKMNcw1xny
GfI0JTQlZTNlM0A8QDyTQZNB6kPqQ3dDd0MwQDBA0jnSOZEvkS9pHmkeVeVV5V/S
X9Jox2jHiMCIwNW81bz8u/y7673rvcnCycIOyw7LOdg52Pn2+fZWJlYmEjQSNK48
rjzOQc5B+EP4Q1hDWEPiP+I/TjlOOcIuwi7bHNsco+Oj44fRh9Hfxt/GN8A3wLO8
s7wGvAa8I74jvjHDMcO1y7XLTdlN2REHEQdtJ20nuzS7NBg9GD0GQgZCA0QDRDZD
NkOSP5I/xzjHOOwt7C0xGzEbD+IP4rbQttBaxlrG6L/ov5O8k7wSvBK8Xb5dvp7D
nsNhzGHMbNps2tQM1Ax5KHkoYDVgNX89fz07QjtCC0QLRBFDEUM+Pz4/Ozg7OBAt
EC1kGWQZlOCU4OrP6s/ZxdnFnb+dv3a8drwivCK8mr6avg3EDcQSzRLNl9uX23UQ
dRB8KXwp/zX/NeI94j1tQm1CEEQQROpC6kLnPuc+rDesNywsLCxrF2sXLt8u3yXP
Jc9bxVvFVL9Uv1y8XLw0vDS82r7avoDEgMTIzcjNz9zP3E8TTxN2KnYqmzabNkI+
Qj5uQm5CtEO0QzRCNELePd49WDZYNosqiyrQFNAUm96b3p/Pn8+DxoPGCMEIwYS+
hL66vrq+osGiwW3Hbce40LjQst+y36IUohQYKRgpGTQZNOw67DqmPqY+qD+oPw8+
Dz7JOck5fDJ8Mg8nDyc3ETcRhd+F3/vR+9G1ybXJycTJxJ/Cn8IAwwDD6cXpxYnL
ict91H3UBuMG4yYVJhUnJycnGDEYMTw3PDeCOoI6QztDO5g5mDlsNWw1aS5pLnIj
ciNrDWsN1ODU4LfUt9RMzUzN78jvyB7HHsemx6bHhsqGyu7P7s912HXYbeZt5hMV
ExXNJM0kqS2pLRkzGTPtNe01cDZwNrk0uTS0MLQwDSoNKqsfqx81CTUJmOKY4uvX
69dg0WDRmM2YzR7MHszIzMjMlc+Vz7LUstSz3LPc7ent6WYUZhTwIfAhrymvKWMu
Yy7AMMAwCDEIMU4vTi+BK4ErTiVOJakbqRsaAxoD7OTs5Lrbutsd1h3W79Lv0s/R
z9GV0pXSQtVC1f7Z/tlU4VThku2S7QwTDBNnHmce9CT0JOAo4CjAKsAqzirOKhsp
GymYJZgl/B/8H0sXSxev+a/5AegB6GbgZuDN283bSdlJ2YfYh9hl2WXZ4Nvg2xzg
HOCS5pLmcfFx8dIQ0hDeGd4ZFB8UHxwiHCJwI3AjQSNBI6AhoCGDHoMesBmwGU4S
ThLK+Mr4QuxC7H3mfeYZ4xnjX+Ff4QzhDOEA4gDiNuQ25MLnwucA7QDtyvXK9TAN
MA2CE4ITBxcHF+cY5xiAGYAZ/Rj9GHQXdBfmFOYUNBE0EdIL0gtE+kT6C/ML89vv
2+9J7knu2e3Z7VTuVO6Y75jvjvGO8Sn0KfRz93P3F/wX/BEFEQX/Bf8FAAAAAAAA
''')

def capture():
	DATE = datetime.now().strftime('%Y-%m-%d_%H%M')
	subprocess.call(['fswebcam', '--device', INPUT, '--resolution', '1280x960', '--jpeg', '85', '--quiet', '{}/{}.jpg'.format(SAVE_DIR, DATE)])
	if (PLAY_SOUND):
		play_sound()
def preview():
	capture()
	last_image = sorted(os.listdir(SAVE_DIR))[0]
	subprocess.call(['pcmanfm', SAVE_DIR + '/' + last_image])
def start():
	subprocess.call(['systemctl', 'start', 'timelapsebot.timer'])
def stop():
	subprocess.call(['systemctl', 'stop', 'timelapsebot.timer'])
def play_sound():
	process = subprocess.Popen(['aplay', '--quiet'], stdin=subprocess.PIPE)
	process.stdin.write(SOUND)
	process.communicate()

parser = argparse.ArgumentParser(description='Take a photo every minute. Reads config from ~/.tlbrc')
subparsers = parser.add_subparsers(title='required', metavar='<command>')
subparsers.add_parser('start', help='start the timer').set_defaults(func=start)
subparsers.add_parser('stop', help='stop the timer').set_defaults(func=stop)
subparsers.add_parser('capture', help='capture an image').set_defaults(func=capture)
subparsers.add_parser('preview', help='capture and open latest image').set_defaults(func=preview)
parser.parse_args().func()
